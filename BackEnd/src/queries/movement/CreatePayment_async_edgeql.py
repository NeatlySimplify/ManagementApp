# AUTOGENERATED FROM 'src/queries/movement/CreatePayment.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreatePaymentResultItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreatePaymentResultItem02(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreatePaymentResultItem03(NoPydanticValidation):
    id: uuid.UUID


async def CreatePayment(
    executor: gel.AsyncIOExecutor,
    *,
    name: str,
    value: str,
    interest: str | None = None,
    penalty: str | None = None,
    ignore_in_totals: bool | None = None,
    category: str,
    subcategory: str | None = None,
    payment_date: datetime.date | None = None,
    is_due: datetime.date,
    status: bool,
    account: uuid.UUID,
    movement: uuid.UUID,
) -> tuple[CreatePaymentResultItem, CreatePaymentResultItem02, CreatePaymentResultItem03, CreatePaymentResultItem02] | None:
    return await executor.query_single(
        """\
        with user:=(select global current_user_obj),
        pay:= (select (insert Payment {
            name:= <str>$name,
            value:=to_decimal(<str>$value, 'FM999999999999D99'),
            interest:= <optional str>$interest,
            penalty:= <optional str>$penalty,
            ignore_in_totals:= <optional bool>$ignore_in_totals,
            category_tag:= <str>$category,
            subcategory_tag:= <optional str>$subcategory,
            payment_date:= <optional cal::local_date>$payment_date ?? <cal::local_date>$is_due,
            is_due:= <cal::local_date>$is_due,
            status:= <bool>$status,
            account:= assert_single((select BankAccount filter .id = <uuid>$account)),
            movement:= assert_single((select Movement filter .id = <uuid>$movement))
        }){*}),
        pay_event:= (insert Scheduler {
            type_tag:= pay.type_tag,
            name := pay.name,
            date:= pay.is_due,
            owner:= user
        }),
        pay_update:= (update pay set {
            event:= pay_event
        }),
        select (user, pay, pay_event, pay_update)\
        """,
        name=name,
        value=value,
        interest=interest,
        penalty=penalty,
        ignore_in_totals=ignore_in_totals,
        category=category,
        subcategory=subcategory,
        payment_date=payment_date,
        is_due=is_due,
        status=status,
        account=account,
        movement=movement,
    )
