# AUTOGENERATED FROM 'src/queries/movement/CreateMovement.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateMovementResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateMovement(
    executor: gel.AsyncIOExecutor,
    *,
    record_id: uuid.UUID | None = None,
    type_tag: str,
    notes: str | None = None,
) -> CreateMovementResult:
    return await executor.query_single(
        """\
        with recorded := <optional uuid>$record_id,
        user:= (select global current_user_obj)
        select (insert Movement {
            owner := user,
            type_tag:= <str>$type_tag,
            notes:=<optional json>$notes,
            record := assert_single((select Record filter .id = recorded)) if exists recorded else {}
            }
        ){id}\
        """,
        record_id=record_id,
        type_tag=type_tag,
        notes=notes,
    )
