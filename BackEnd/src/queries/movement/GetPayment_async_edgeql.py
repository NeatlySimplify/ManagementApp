# AUTOGENERATED FROM 'src/queries/movement/GetPayment.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import decimal
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetPaymentResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    type_tag: str
    value: decimal.Decimal | None
    ignore_in_totals: bool | None
    interest: str | None
    penalty: str | None
    category_tag: str | None
    subcategory_tag: str | None
    payment_date: datetime.date | None
    is_due: datetime.date | None
    status: bool | None
    account: GetPaymentResultAccount
    event: GetPaymentResultEvent | None
    movement: GetPaymentResultMovement


@dataclasses.dataclass
class GetPaymentResultAccount(NoPydanticValidation):
    id: uuid.UUID
    account_name: str


@dataclasses.dataclass
class GetPaymentResultEvent(NoPydanticValidation):
    id: uuid.UUID
    date: datetime.date | None


@dataclasses.dataclass
class GetPaymentResultMovement(NoPydanticValidation):
    id: uuid.UUID


async def GetPayment(
    executor: gel.AsyncIOExecutor,
    *,
    payment: uuid.UUID,
) -> GetPaymentResult | None:
    return await executor.query_single(
        """\
        select Payment {
            name,
            type_tag,
            value,
            ignore_in_totals,
            interest,
            penalty,
            category_tag,
            subcategory_tag,
            payment_date,
            is_due,
            status,
            account:{
                id,
                account_name,
            },
            event: {
                id,
                date,
            },
            movement:{id}
        } filter .id = <uuid>$payment\
        """,
        payment=payment,
    )
