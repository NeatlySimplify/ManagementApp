# AUTOGENERATED FROM 'src/queries/record/GetRecord.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetRecordResult(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    id_service: str | None
    active: bool | None
    status: str | None
    type_record: str | None
    str_value: str | None
    notes: str | None
    entity: list[GetRecordResultEntityItem]
    event: list[GetRecordResultEventItem]
    movement: list[GetRecordResultMovementItem]


@dataclasses.dataclass
class GetRecordResultEntityItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None


@dataclasses.dataclass
class GetRecordResultEventItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    type_entry: str | None
    status: bool | None
    date: datetime.date | None


@dataclasses.dataclass
class GetRecordResultMovementItem(NoPydanticValidation):
    id: uuid.UUID
    type_movement: str | None
    str_value: str
    installment: int
    payment: list[GetRecordResultMovementItemPaymentItem]


@dataclasses.dataclass
class GetRecordResultMovementItemPaymentItem(NoPydanticValidation):
    id: uuid.UUID
    status: bool | None
    payment_date: datetime.date | None


async def GetRecord(
    executor: gel.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> GetRecordResult | None:
    return await executor.query_single(
        """\
        select Record {
            name,
            id_service,
            active,
            status,
            type_record:= .type,
            str_value:=to_str(.value),
            notes,
            entity: {
                id,
                name,
            },
            event: {
                id,
                name,
                type_entry:= .type,
                status,
                date
            },
            movement: {
                id,
                type_movement:= .type,
                str_value:=to_str(.value),
                installment,
                payment: {
                    id,
                    status,
                    payment_date
                }
            }
        } filter .id = <uuid>$id\
        """,
        id=id,
    )
