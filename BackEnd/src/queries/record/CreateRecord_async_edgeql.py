# AUTOGENERATED FROM 'src/queries/record/CreateRecord.edgeql' WITH:
#     $ gel-py


from __future__ import annotations

import dataclasses
import uuid

import gel


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = list
        return []


@dataclasses.dataclass
class CreateRecordResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateRecord(
    executor: gel.AsyncIOExecutor,
    *,
    user: uuid.UUID,
    name: str,
    id_service: str | None = None,
    active: bool | None = None,
    status: str | None = None,
    type: str,
    value: str,
    entity: uuid.UUID,
) -> CreateRecordResult:
    return await executor.query_single(
        """\
        select (insert Record{
            user:= assert_single((select InternalUser filter .id = <uuid>$user)),
            name:= <str>$name,
            id_service := <optional str>$id_service,
            active:= <optional bool>$active ?? <bool>true,
            status := <optional str>$status,
            type:= <str>$type,
            value := to_decimal(<str>$value, 'FM999999999999.99'),
            entity := assert_single((select Entity filter .id = <uuid>$entity))
        }){
            id
        }\
        """,
        user=user,
        name=name,
        id_service=id_service,
        active=active,
        status=status,
        type=type,
        value=value,
        entity=entity,
    )
