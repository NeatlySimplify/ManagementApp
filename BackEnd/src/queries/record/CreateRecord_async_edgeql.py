# AUTOGENERATED FROM 'src/queries/record/CreateRecord.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateRecordResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateRecord(
    executor: gel.AsyncIOExecutor,
    *,
    name: str,
    id_service: str | None = None,
    status: bool | None = None,
    optional_status: str | None = None,
    type_tag: str,
    value: str,
    notes: str | None = None,
    entities: list[uuid.UUID],
) -> CreateRecordResult:
    return await executor.query_single(
        """\
        with user:= (select global current_user_obj),
        insert Record{
            owner:= user,
            name:= <str>$name,
            service_id := <optional str>$id_service,
            status:= <optional bool>$status ?? <bool>true,
            optional_status := <optional str>$optional_status,
            type_tag:= <str>$type_tag,
            value := to_decimal(<str>$value, 'FM999999999999.99'),
            notes:=<optional json>$notes,
            entity := (select Entity filter .id in array_unpack(<array<uuid>>$entities))
        }\
        """,
        name=name,
        id_service=id_service,
        status=status,
        optional_status=optional_status,
        type_tag=type_tag,
        value=value,
        notes=notes,
        entities=entities,
    )
