# AUTOGENERATED FROM 'src/queries/schedule/CreateSchedule.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateScheduleResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateSchedule(
    executor: gel.AsyncIOExecutor,
    *,
    type_tag: str,
    name: str,
    status: bool | None = None,
    date: datetime.date,
    beginning_time: datetime.time | None = None,
    ending_time: datetime.time | None = None,
    notes: str | None = None,
) -> CreateScheduleResult:
    return await executor.query_single(
        """\
        insert Scheduler {
            type_tag:= <str>$type_tag,
            name:= <str>$name,
            status:= <optional bool>$status,
            date:= <cal::local_date>$date,
            beginning_time:= <optional cal::local_time>$beginning_time,
            ending_time:= <optional cal::local_time>$ending_time,
            notes:=<optional json>$notes,
        }\
        """,
        type_tag=type_tag,
        name=name,
        status=status,
        date=date,
        beginning_time=beginning_time,
        ending_time=ending_time,
        notes=notes,
    )
