# AUTOGENERATED FROM 'src/queries/entity/UpdateEntity.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdateEntityResult(NoPydanticValidation):
    id: uuid.UUID


async def UpdateEntity(
    executor: gel.AsyncIOExecutor,
    *,
    entity: uuid.UUID,
    email: str | None = None,
    type_tag: str | None = None,
    document_type: str | None = None,
    status: bool | None = None,
    document: str | None = None,
    name: str | None = None,
    sex: str | None = None,
    relationship_status: str | None = None,
    notes: str | None = None,
    birth: datetime.date | None = None,
) -> UpdateEntityResult | None:
    return await executor.query_single(
        """\
        with old_entity:=(select Entity filter .id = <uuid>$entity)
        update old_entity set {
            email:= <optional str>$email ?? .email,
            type_tag:= <optional str>$type_tag ?? .type_tag,
            document_type:= <optional str>$document_type ?? .document_type,
            status:= <optional bool>$status ?? old_entity.status,
            document:= <optional str>$document ?? .document,
            name:= <optional str>$name ?? old_entity.name,
            sex:= <optional str>$sex ?? old_entity.sex,
            relationship_status:= <optional str>$relationship_status ?? old_entity.relationship_status,
            notes:=<optional json>$notes ?? .notes,
            birth:= <optional cal::local_date>$birth ?? old_entity.birth
        }\
        """,
        entity=entity,
        email=email,
        type_tag=type_tag,
        document_type=document_type,
        status=status,
        document=document,
        name=name,
        sex=sex,
        relationship_status=relationship_status,
        notes=notes,
        birth=birth,
    )
