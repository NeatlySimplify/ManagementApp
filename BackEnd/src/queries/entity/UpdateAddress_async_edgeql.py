# AUTOGENERATED FROM 'src/queries/entity/UpdateAddress.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdateAddressResult(NoPydanticValidation):
    id: uuid.UUID


async def UpdateAddress(
    executor: gel.AsyncIOExecutor,
    *,
    state: str | None = None,
    city: str | None = None,
    district: str | None = None,
    street: str | None = None,
    number: int | None = None,
    complement: str | None = None,
    postal: str | None = None,
    address: uuid.UUID,
) -> UpdateAddressResult | None:
    return await executor.query_single(
        """\
        update Address filter .id = <uuid>$address set {
            state:= <optional str>$state ?? .state,
            city:= <optional str>$city ?? .city,
            district:= <optional str>$district ?? .district,
            street:= <optional str>$street ?? .street,
            number:= <optional int64>$number ?? .number,
            complement:= <optional str>$complement ?? .complement,
            postal:= <optional str>$postal ?? .postal
        }\
        """,
        state=state,
        city=city,
        district=district,
        street=street,
        number=number,
        complement=complement,
        postal=postal,
        address=address,
    )
