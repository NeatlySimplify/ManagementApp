# AUTOGENERATED FROM 'src/queries/entity/CreateEntity.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateEntityResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateEntity(
    executor: gel.AsyncIOExecutor,
    *,
    user: uuid.UUID,
    email: str,
    type: str,
    id_type: str,
    status: bool | None = None,
    govt_id: str,
    name: str,
    sex: str | None = None,
    notes: str | None = None,
    relationship_status: str | None = None,
    birth: datetime.date | None = None,
) -> CreateEntityResult:
    return await executor.query_single(
        """\
        select (insert Entity {
            user:= <InternalUser><uuid>$user,
            email:= <str>$email,
            type:= <str>$type,
            id_type:= <str>$id_type,
            status:= <optional bool>$status,
            govt_id:= <str>$govt_id,
            name:= <str>$name,
            sex:= <optional str>$sex,
            notes:=<optional json>$notes,
            relationship_status:= <optional str>$relationship_status,
            birth:= <optional cal::local_date>$birth
        }){id}\
        """,
        user=user,
        email=email,
        type=type,
        id_type=id_type,
        status=status,
        govt_id=govt_id,
        name=name,
        sex=sex,
        notes=notes,
        relationship_status=relationship_status,
        birth=birth,
    )
