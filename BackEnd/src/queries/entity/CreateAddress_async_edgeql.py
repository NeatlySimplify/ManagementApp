# AUTOGENERATED FROM 'src/queries/entity/CreateAddress.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateAddressResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateAddress(
    executor: gel.AsyncIOExecutor,
    *,
    state: str,
    city: str,
    district: str,
    street: str,
    number: int | None = None,
    complement: str | None = None,
    postal: str | None = None,
    entity_id: uuid.UUID,
) -> CreateAddressResult:
    return await executor.query_single(
        """\
        with add_address:= (
            insert Address{
                state:= <str>$state,
                city:= <str>$city,
                district:= <str>$district,
                street:= <str>$street,
                number:= <optional int64>$number,
                complement:= <optional str>$complement,
                postal:= <optional str>$postal
            }
        ),
        update_entity := (
            update Entity filter .id = <uuid>$entity_id set {
                address += add_address
            }
        )
        select add_address{id}\
        """,
        state=state,
        city=city,
        district=district,
        street=street,
        number=number,
        complement=complement,
        postal=postal,
        entity_id=entity_id,
    )
