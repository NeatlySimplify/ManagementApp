# AUTOGENERATED FROM 'src/queries/entity/CreateContact.edgeql' WITH:
#     $ gel-py


from __future__ import annotations

import dataclasses
import uuid

import gel


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = list
        return []


@dataclasses.dataclass
class CreateContactResult(NoPydanticValidation):
    contact: CreateContactResultContact | None
    updated: CreateContactResultUpdated | None


@dataclasses.dataclass
class CreateContactResultContact(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class CreateContactResultUpdated(NoPydanticValidation):
    id: uuid.UUID


async def CreateContact(
    executor: gel.AsyncIOExecutor,
    *,
    entity: uuid.UUID,
    name: str,
    email: str | None = None,
) -> CreateContactResult:
    return await executor.query_single(
        """\
        with entity:=assert_single((select Entity filter .id = <uuid>$entity)),
        add_contact:= (
            insert Contact{
                name:= <str>$name,
                email:= <optional str>$email,
            }
        ) if exists entity else <Contact>{},
        update_entity:= (update entity set {
            phone += add_contact
        }),
        select {
            contact := add_contact { id },
            updated := update_entity { id }
        }\
        """,
        entity=entity,
        name=name,
        email=email,
    )
