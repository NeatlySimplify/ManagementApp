# AUTOGENERATED FROM 'src/queries/user/CreateSettings.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateSettingsResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateSettings(
    executor: gel.AsyncIOExecutor,
    *,
    bank_account: uuid.UUID,
    record_title: str,
    movement_title: str,
    entity_title: str,
) -> CreateSettingsResult | None:
    return await executor.query_single(
        """\
        with user:= (select global current_user_obj),
        setup:=(
            insert UserSettings {
                default_bank_account:= assert_single((select BankAccount filter .id = <uuid>$bank_account)),
                record_title := <str>$record_title,
                movement_title := <str>$movement_title,
                entity_title := <str>$entity_title,
            }
        )
        update user set {
            settings:= setup
        }\
        """,
        bank_account=bank_account,
        record_title=record_title,
        movement_title=movement_title,
        entity_title=entity_title,
    )
