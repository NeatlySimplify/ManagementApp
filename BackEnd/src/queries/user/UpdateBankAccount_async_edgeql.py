# AUTOGENERATED FROM 'src/queries/user/UpdateBankAccount.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class UpdateBankAccountResult(NoPydanticValidation):
    id: uuid.UUID


async def UpdateBankAccount(
    executor: gel.AsyncIOExecutor,
    *,
    bank_name: str | None = None,
    account_name: str | None = None,
    details: str | None = None,
    ignore_on_totals: bool | None = None,
    category: str | None = None,
    type: str | None = None,
    bank_account: uuid.UUID,
) -> UpdateBankAccountResult | None:
    return await executor.query_single(
        """\
        update BankAccount filter .id = <uuid>$bank_account set {
            bank_name:= <optional str>$bank_name ?? .bank_name,
            account_name:= <optional str>$account_name ?? .account_name,
            details:= <optional json>$details ?? .details,
            ignore_on_totals:= <optional bool>$ignore_on_totals ?? .ignore_on_totals,
            category:= <optional str>$category ?? .category,
            type:= <optional str>$type ?? .type
        }\
        """,
        bank_name=bank_name,
        account_name=account_name,
        details=details,
        ignore_on_totals=ignore_on_totals,
        category=category,
        type=type,
        bank_account=bank_account,
    )
