# AUTOGENERATED FROM 'src/queries/user/GetUserToken.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetUserTokenResult(NoPydanticValidation):
    id: uuid.UUID
    refresh_token: uuid.UUID | None


async def GetUserToken(
    executor: gel.AsyncIOExecutor,
    *,
    email: str,
) -> GetUserTokenResult | None:
    return await executor.query_single(
        """\
        with user:= assert_single((select User filter .email = <str>$email)),
        select (update user set {use_token:=true}){refresh_token}\
        """,
        email=email,
    )
