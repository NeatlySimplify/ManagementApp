# AUTOGENERATED FROM 'src/queries/user/CreateRefreshToken.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateRefreshTokenResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateRefreshToken(
    executor: gel.AsyncIOExecutor,
    *,
    token: str,
    email: str,
    enc_pw: str,
    identity_id: uuid.UUID,
    duration: str,
) -> CreateRefreshTokenResult:
    return await executor.query_single(
        """\
        INSERT RefreshToken {
            token := <str>$token,
            email := <str>$email,
            encrypted_password := <str>$enc_pw,
            identity := <ext::auth::Identity><uuid>$identity_id,
            expires_at := datetime_current() + <duration><str>$duration
        }\
        """,
        token=token,
        email=email,
        enc_pw=enc_pw,
        identity_id=identity_id,
        duration=duration,
    )
