# AUTOGENERATED FROM 'src/queries/user/GetRefreshToken.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetRefreshTokenResult(NoPydanticValidation):
    id: uuid.UUID
    email: str
    encrypted_password: str
    expires_at: datetime.datetime
    identity: GetRefreshTokenResultIdentity


@dataclasses.dataclass
class GetRefreshTokenResultIdentity(NoPydanticValidation):
    id: uuid.UUID


async def GetRefreshToken(
    executor: gel.AsyncIOExecutor,
    *,
    refresh_token: str,
) -> GetRefreshTokenResult | None:
    return await executor.query_single(
        """\
        select assert_single((SELECT RefreshToken {
            email,
            encrypted_password,
            expires_at,
            identity: { id }
        }
        FILTER .token = <str>$refresh_token AND .expires_at > datetime_current()))\
        """,
        refresh_token=refresh_token,
    )
