# AUTOGENERATED FROM 'src/queries/user/CreateUser.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateUserResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateUser(
    executor: gel.AsyncIOExecutor,
    *,
    type_insert: str,
    name: str,
    email: str,
    password: str,
    refreshe_token: uuid.UUID,
) -> CreateUserResult:
    return await executor.query_single(
        """\
        with query_todo:= (
        insert Account {
            name := <str>$name,
            email:= <str>$email,
            password:= <str>$password,
            refresh_token:= <uuid>$refreshe_token
        }
        ) if <str>$type_insert = "organization" else (
        insert Individual {
            name := <str>$name,
            email:= <str>$email,
            password:= <str>$password,
            refresh_token:= <uuid>$refreshe_token
        }
        )
        select query_todo\
        """,
        type_insert=type_insert,
        name=name,
        email=email,
        password=password,
        refreshe_token=refreshe_token,
    )
