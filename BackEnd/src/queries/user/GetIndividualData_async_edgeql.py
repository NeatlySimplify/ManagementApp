# AUTOGENERATED FROM 'src/queries/user/GetIndividualData.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import datetime
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetIndividualDataResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    email: str
    auth: bool
    total_balance: str
    settings: GetIndividualDataResultSettings | None
    movement: list[GetIndividualDataResultMovementItem]
    entity: list[GetIndividualDataResultEntityItem]
    payment: list[GetIndividualDataResultPaymentItem]
    record: list[GetIndividualDataResultRecordItem]
    event: list[GetIndividualDataResultEventItem]
    account: list[GetIndividualDataResultAccountItem]


@dataclasses.dataclass
class GetIndividualDataResultAccountItem(NoPydanticValidation):
    id: uuid.UUID
    bank_name: str
    account_name: str
    balance_str: str | None
    ignore_on_totals: bool | None


@dataclasses.dataclass
class GetIndividualDataResultEntityItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    email: str
    document: str | None
    type_tag: str | None
    document_type: str | None
    status: bool | None
    address: list[GetIndividualDataResultEntityItemAddressItem]
    phone: list[GetIndividualDataResultEntityItemPhoneItem]


@dataclasses.dataclass
class GetIndividualDataResultEntityItemAddressItem(NoPydanticValidation):
    id: uuid.UUID
    state: str | None
    city: str | None


@dataclasses.dataclass
class GetIndividualDataResultEntityItemPhoneItem(NoPydanticValidation):
    id: uuid.UUID
    number: str | None


@dataclasses.dataclass
class GetIndividualDataResultEventItem(NoPydanticValidation):
    id: uuid.UUID
    type_tag: str | None
    name: str | None
    status: bool | None
    date: datetime.date | None


@dataclasses.dataclass
class GetIndividualDataResultMovementItem(NoPydanticValidation):
    id: uuid.UUID
    type_tag: str
    value_str: str
    installment: int
    payment: list[GetIndividualDataResultMovementItemPaymentItem]


@dataclasses.dataclass
class GetIndividualDataResultMovementItemPaymentItem(NoPydanticValidation):
    id: uuid.UUID
    status: bool | None
    payment_date: datetime.date | None


@dataclasses.dataclass
class GetIndividualDataResultPaymentItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    type_tag: str
    value_str: str | None
    payment_date: datetime.date | None
    status: bool | None
    movement: GetIndividualDataResultPaymentItemMovement


@dataclasses.dataclass
class GetIndividualDataResultPaymentItemMovement(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetIndividualDataResultRecordItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    service_id: str | None
    status: bool | None
    optional_status: str | None
    type_tag: str | None


@dataclasses.dataclass
class GetIndividualDataResultSettings(NoPydanticValidation):
    id: uuid.UUID
    account_types: list[str] | None
    default_bank_account: GetIndividualDataResultSettingsDefaultBankAccount | None
    record_title: str | None
    movement_title: str | None
    entity_title: str | None
    entity_types: list[str] | None
    entity_document_types: list[str] | None
    contact_number_types: list[str] | None
    record_types: list[str] | None
    record_status: list[str] | None
    movement_income_types: list[str] | None
    movement_expense_types: list[str] | None
    scheduler_types: list[str] | None
    movement_cycle_types: list[str] | None


@dataclasses.dataclass
class GetIndividualDataResultSettingsDefaultBankAccount(NoPydanticValidation):
    id: uuid.UUID


async def GetIndividualData(
    executor: gel.AsyncIOExecutor,
) -> GetIndividualDataResult | None:
    return await executor.query_single(
        """\
        with selected_user:= (select global current_user),
        converted := (select Individual filter .id = selected_user),
        select converted{
            name,
            email,
            auth:= true,
            total_balance:= to_str(sum((select converted.account.balance))),
            settings: {
                id,
                account_types,
                default_bank_account: {id},
                record_title,
                movement_title,
                entity_title,
                entity_types,
                entity_document_types,
                contact_number_types,
                record_types,
                record_status,
                movement_income_types,
                movement_expense_types,
                scheduler_types,
                movement_cycle_types
            },
            movement: {
                id,
                type_tag,
                value_str:= to_str(.value),
                installment,
                payment: {
                    id,
                    status,
                    payment_date,
                }
            },
            entity: {
                id,
                name,
                email,
                document,
                type_tag,
                document_type,
                status,
                address: {
                    state,
                    city,
                },
                phone: {number}
            },
            payment:{
                id,
                name,
                type_tag,
                value_str:=to_str(.value),
                payment_date,
                status,
                movement:{id}
            },
            record: {
                id,
                name,
                service_id,
                status,
                optional_status,
                type_tag,
            },
            event:{
                id,
                type_tag,
                name,
                status,
                date,
            },
            account: {
                id,
                bank_name,
                account_name,
                balance_str:=to_str(.balance),
                ignore_on_totals,
            }
        }\
        """,
    )
