# AUTOGENERATED FROM 'src/queries/user/CreateBankAccount.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import decimal
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class CreateBankAccountResult(NoPydanticValidation):
    id: uuid.UUID


async def CreateBankAccount(
    executor: gel.AsyncIOExecutor,
    *,
    user: uuid.UUID,
    bank_name: str,
    account_name: str,
    balance: decimal.Decimal,
    details: str | None = None,
    category: str | None = None,
    ignore_on_totals: bool,
    type: str | None = None,
) -> CreateBankAccountResult:
    return await executor.query_single(
        """\
        with user:= <uuid>$user,
        add_bank:=(
            insert BankAccount {
                bank_name:= <str>$bank_name,
                account_name:= <str>$account_name,
                balance:= <decimal>$balance,
                details:= <optional json>$details,
                category:= <optional str>$category,
                ignore_on_totals:= <bool>$ignore_on_totals,
                type:= <optional str>$type
            }
        ),
        update_user:= (
            update InternalUser filter .id = <uuid>$user set {
                account += add_bank
            }
        )
        select add_bank{id};\
        """,
        user=user,
        bank_name=bank_name,
        account_name=account_name,
        balance=balance,
        details=details,
        category=category,
        ignore_on_totals=ignore_on_totals,
        type=type,
    )
