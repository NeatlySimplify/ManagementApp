# AUTOGENERATED FROM 'src/queries/user/GetBankAccount.edgeql' WITH:
#     $ gel-py


from __future__ import annotations
import dataclasses
import decimal
import gel
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class GetBankAccountResult(NoPydanticValidation):
    id: uuid.UUID
    bank_name: str
    account_name: str
    balance: decimal.Decimal | None
    details: str | None
    ignore_on_totals: bool | None
    category: str | None
    type: str | None


async def GetBankAccount(
    executor: gel.AsyncIOExecutor,
    *,
    bank_account: uuid.UUID,
) -> GetBankAccountResult | None:
    return await executor.query_single(
        """\
        select BankAccount {
            bank_name,
            account_name,
            balance,
            details,
            ignore_on_totals,
            category,
            type
        } filter .id = <uuid>$bank_account\
        """,
        bank_account=bank_account,
    )
