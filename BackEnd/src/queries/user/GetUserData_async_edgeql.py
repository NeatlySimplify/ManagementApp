# AUTOGENERATED FROM 'src/queries/user/GetUserData.edgeql' WITH:
#     $ gel-py


from __future__ import annotations

import dataclasses
import datetime
import decimal
import uuid

import gel


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = list
        return []


@dataclasses.dataclass
class GetUserDataResult(NoPydanticValidation):
    id: uuid.UUID
    name: str
    email: str
    settings: GetUserDataResultSettings | None
    movement: list[GetUserDataResultMovementItem]
    entity: list[GetUserDataResultEntityItem]
    paymente_income: list[GetUserDataResultPaymenteIncomeItem]
    paymente_expense: list[GetUserDataResultPaymenteIncomeItem]
    record: list[GetUserDataResultRecordItem]
    event: list[GetUserDataResultEventItem]
    account: list[GetUserDataResultSettingsDefaultBankAccount]
    entityNUM: int
    recordNUM: int
    balanceTOTAL: decimal.Decimal


@dataclasses.dataclass
class GetUserDataResultEntityItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    email: str
    govt_id: str | None
    type: str | None
    id_type: str | None
    status: bool | None
    address: list[GetUserDataResultEntityItemAddressItem]
    phone: list[GetUserDataResultEntityItemPhoneItem]


@dataclasses.dataclass
class GetUserDataResultEntityItemAddressItem(NoPydanticValidation):
    id: uuid.UUID
    state: str | None
    city: str | None


@dataclasses.dataclass
class GetUserDataResultEntityItemPhoneItem(NoPydanticValidation):
    id: uuid.UUID
    number: list[GetUserDataResultEntityItemPhoneItemNumberItem]


@dataclasses.dataclass
class GetUserDataResultEntityItemPhoneItemNumberItem(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetUserDataResultEventItem(NoPydanticValidation):
    id: uuid.UUID
    type: str | None
    name: str | None
    status: bool | None
    date: datetime.date | None


@dataclasses.dataclass
class GetUserDataResultMovementItem(NoPydanticValidation):
    id: uuid.UUID
    type: str | None
    value: decimal.Decimal
    installment: int


@dataclasses.dataclass
class GetUserDataResultPaymenteIncomeItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    type: str | None
    value: decimal.Decimal | None
    payment_date: datetime.date | None
    status: bool | None
    movement: GetUserDataResultPaymenteIncomeItemMovement


@dataclasses.dataclass
class GetUserDataResultPaymenteIncomeItemMovement(NoPydanticValidation):
    id: uuid.UUID


@dataclasses.dataclass
class GetUserDataResultRecordItem(NoPydanticValidation):
    id: uuid.UUID
    name: str | None
    id_service: str | None
    active: bool | None
    status: str | None
    type: str | None


@dataclasses.dataclass
class GetUserDataResultSettings(NoPydanticValidation):
    id: uuid.UUID
    account_types: list[str] | None
    default_bank_account: GetUserDataResultSettingsDefaultBankAccount | None
    record_title: str | None
    movement_title: str | None
    entity_title: str | None
    entity_types: list[str] | None
    entity_id_types: list[str] | None
    contact_number_types: list[str] | None
    record_types: list[str] | None
    record_status: list[str] | None
    movement_income_types: list[str] | None
    movement_expense_types: list[str] | None
    scheduler_types: list[str] | None
    movement_cycle_types: list[str] | None


@dataclasses.dataclass
class GetUserDataResultSettingsDefaultBankAccount(NoPydanticValidation):
    id: uuid.UUID
    bank_name: str
    account_name: str
    balance: decimal.Decimal | None


async def GetUserData(
    executor: gel.AsyncIOExecutor,
    *,
    id: uuid.UUID,
) -> GetUserDataResult | None:
    return await executor.query_single(
        """\
        with user_id:= (<uuid>$id),
        select InternalUser {
            name,
            email,
            settings: {
                id,
                account_types,
                default_bank_account: { id, bank_name, account_name, balance },
                record_title,
                movement_title,
                entity_title,
                entity_types,
                entity_id_types,
                contact_number_types,
                record_types,
                record_status,
                movement_income_types,
                movement_expense_types,
                scheduler_types,
                movement_cycle_types
            },
            movement: {
                id,
                type,
                value,
                installment,
            },
            entity: {
                id,
                name,
                email,
                govt_id,
                type,
                id_type,
                status,
                address: {
                    state,
                    city,
                },
                phone: {
                    id,
                    number,
                }
            },
            paymente_income:{
                id,
                name,
                type,
                value,
                payment_date,
                status,
                movement:{id}
            },
            paymente_expense:{
                id,
                name,
                type,
                value,
                payment_date,
                status,
                movement:{id}
            },
            record: {
                id,
                name,
                id_service,
                active,
                status,
                type,
            },
            event:{
                id,
                type,
                name,
                status,
                date,
            },
            account: {
                id,
                bank_name,
                account_name,
                balance,
            },
            entityNUM:= (select EntityNum(user_id)),
            recordNUM:= (select RecordNum(user_id)),
            balanceTOTAL:= (select balanceTotal(user_id))
        } filter .id = user_id\
        """,
        id=id,
    )
