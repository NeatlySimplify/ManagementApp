using extension edgeql_http;
using extension auth;
module default {
    global current_user := (
        assert_single((
            select User
            filter .identity = global ext::auth::ClientTokenIdentity
        ))
    );

    abstract type Derived{
        owner: User {
            on target delete delete source;
            on source delete allow;
            default:= global current_user;
        };
        type_tag: str;
        access policy allow_user allow all using(global current_user ?= __subject__.owner)
    };

    type RefreshToken {
        required token: str;
        required email: str;
        required encrypted_password: str;
        required identity: ext::auth::Identity;
        required expires_at: datetime;
    }

    abstract type User{
        required name: str;
        tag_type: str;
        is_admin: bool {
            default:= <bool>false;
        }
        required email: str {
            delegated constraint exclusive;
        };
        required identity: ext::auth::Identity {
            constraint exclusive;
        };
        refresh_token: uuid;
        use_token: bool {
            default := false;
        };
        timestamp: datetime {
            default := datetime_of_statement();
        };
        first_access: bool {
            default:= true;
        };
        settings: UserSettings {
            on source delete delete target
        };

        # Link to Other Types
        multi account:= (select detached BankAccount filter .owner = __source__);
        multi movement:= .<owner[is Movement];
        multi entity := .<owner[is Entity];
        multi record := (select detached Record filter .owner = __source__);
        multi event := (select detached Scheduler filter .owner = __source__);

        # Computed Properties:
        payment:=(select __source__.movement.payment order by .payment_date desc);

        access policy allow_insert allow insert using (true);
        access policy allow_user allow select, update, delete using (global current_user ?= __subject__);


        trigger log_insert after insert for each do (
            insert Auditable {
                user := __new__.id,
                object_id := __new__.id,
                action := "insert",
                details := <json>__new__ {*}
            }
        );
    }

    type Auditable {
        timestamp: datetime {
            default := datetime_of_statement();
        };
        object_id: uuid;
        user: uuid;
        action: str;
        details: json;

        access policy admin_only allow update, delete using (global current_user.is_admin ?? false);
        access policy allow_all_inserts allow insert using (true);
    }

    type UserSettings {
        account_types: array<str>{
            default := ["Conta Corrente", "Conta Poupança", "Investimentos", "Carteira"];
        };
        default_bank_account: BankAccount;
        record_title: str;
        movement_title: str;
        entity_title: str;
        entity_types: array<str>{
            default := ["Cliente PF", "Cliente PJ", "Sócio"];
        };
        entity_document_types: array<str>{
            default:= ["CPF", "CNPJ", "RG", "CNH"];
        };
        contact_number_types: array<str>{
            default:= ["Casa", "Celular", "Trabalho"];
        };
        record_types: array<str>{
            default := ["Serviço"];
        };
        record_status: array<str>{
            default := ["Em Andamento", "Concluído"];
        };
        movement_income_types: array<str>{
            default := ["Benefícios", "Comissão", "Pagamentos", "Rendimentos", "Serviços", "Outros"];
        };
        movement_expense_types: array<str>{
            default := ["Alimentação", "Transporte", "Cartão de Crédito", "Educação", "Família", "Lazer", "Moradia", "Pagamentos", "Saúde", "Serviços", "Outros"];
        }
        scheduler_types: array<str>{
            default := ["Evento", "Tarefa", "Reunião"];
        };
        movement_cycle_types: array<str>{
            default:= ["Diário", "Semanal", "Quinzenal", "Mensal", "Trimestral", "Semestral", "Anual", "Personalizado"];
        };
        relationship_status: array<str>{
            default:=["Casado(a)", "Viúvo(a)", "Solteiro(a)", "Divorciádo(a)", "Em União Estável"]
        };
        sex: array<str>{
            default:= ["Masculino", "Feminino", "Outro"]
        };
    }

    type Administator extending User {
        overloaded tag_type: str {
            default:= "is_admin";
        };
        overloaded is_admin:bool{
            default:= <bool>true;
        };

    };

    type Account extending User{
        overloaded tag_type: str {
            default:= "is_account";
        };
        multi grouping:= .<owner[is Project];
        multi collaborator_pool: Individual;

        access policy allow_admin allow select, update, delete using (global current_user.is_admin ?? false);
    }

    type Project extending Derived{
        name: str;
        notes: json;
        multi people: Individual {
            role: str;
        };
        single record: Record {
            on source delete delete target;
            on target delete allow;
        };
        multi schedule: Scheduler {
            on source delete delete target;
            on target delete allow;
        };
        multi movement: Movement {
            on source delete delete target;
            on target delete allow;
        }
        multi entity: Entity {
            on source delete allow;
        }
    }

    type Address {
        state: str;
        city: str;
        district: str;
        street: str;
        number: int64;
        complement: str;
        postal: str;
    }

    type Contact{
        type_tag: str;
        number: str;
        complement: str;
    }

    type Individual extending User{
        overloaded tag_type: str {
            default:= "is_individual";
        };
        # Shared Resources
        multi projects:= .<people[is Project];
        multi shared_schdeule := (__source__.projects.schedule);

        access policy allow_admin allow select, update, delete using (global current_user.is_admin ?? false);
    }

    # Client, Person or Organization
    type Entity extending Derived{
        name: str;
        required email: str {
            constraint exclusive;
        };
        document_type: str;
        document: str;
        status: bool {
            default := true;
        };
        sex: str;
        relationship_status: str;
        birth: cal::local_date;
        notes: json;
        multi phone : Contact{
            on source delete delete target;
            on target delete allow;
        };
        multi address : Address{
            on source delete delete target;
            on target delete allow;
        };
    }

    # Service or Action
    type Record extending Derived{
        name: str;
        service_id: str;
        status: bool;
        optional_status: str;
        value: decimal;
        notes: json;
        multi entity: Entity {
            on target delete allow;
        };
        multi event: Scheduler;
        multi movement: Movement {
            on source delete delete target;
            on target delete allow;
        };
   }

    type Scheduler extending Derived{
        name: str;
        status: bool {
            default:= false;
        };
        date: cal::local_date;
        beginning_time: cal::local_time;
        optional ending_time: cal::local_time;
        notes: json;
    }

    type BankAccount extending Derived{
        required bank_name: str;
        required account_name: str;
        balance: decimal {
            constraint min_value(0);
            default := 0;
        };
        notes: json;
        ignore_on_totals: bool {
            default:= <bool>false;
        };
        category_tag:str;
    }


    type Movement extending Derived{
        value:= (sum(__source__.payment.value));
        installment:= (count(__source__.payment));
        notes: json;
        record: Record;
        accounts:= (distinct(__source__.payment.account));
        multi payment:= .<movement[is Payment];
    }


    type Payment extending Derived{
        name: str;
        value: decimal;
        interest: str;
        penalty: str;
        ignore_in_totals: bool{
            default := false;
        };
        category_tag: str;
        subcategory_tag: str;
        payment_date: cal::local_date;
        is_due: cal::local_date;
        status: bool{
            default:= false;
        };
        required account: BankAccount {
            on target delete restrict;
        };
        required movement: Movement {
            on target delete delete source;
        };
        event: Scheduler {
            on source delete delete target;
        };

        trigger update_balance_on_insert after insert for each when (
            __new__.status = true and __new__.ignore_in_totals = false
        ) do (
            update BankAccount filter .id = __new__.account.id set {
                balance := .balance + (__new__.value * (if __new__.type_tag = "income" then 1 else -1))
            }
        );

        # Handles changes to value, status, or ignore_in_totals WHEN THE ACCOUNT REMAINS THE SAME
        trigger update_balance_on_same_account_changes after update for each when (
            __old__.account.id = __new__.account.id and (
                __old__.value != __new__.value or
                __old__.status != __new__.status or
                __old__.ignore_in_totals != __new__.ignore_in_totals
            )
        ) do (
            with
                old_value := __old__.value,
                new_value := __new__.value,
                old_payment_status := __old__.status,
                new_payment_status := __new__.status,
                old_ignore := __old__.ignore_in_totals,
                new_ignore := __new__.ignore_in_totals,
                payment_type := __new__.type_tag,

                net_impact := (
                    (new_value if new_payment_status and not new_ignore else 0) -
                    (old_value if old_payment_status and not old_ignore else 0)
                ) * if payment_type = "income" then 1 else -1,
                select (
                    update BankAccount filter .id = __new__.account.id set {
                        balance := .balance + net_impact
                    }
                ) if net_impact != 0 else <BankAccount>{}
        );

        # Handles changes to the ACCOUNT LINK
        trigger update_balance_on_account_change after update for each when (
            __old__.account.id != __new__.account.id
        ) do (
            with
                old_value := __old__.value,
                new_value := __new__.value,
                old_payment_status := __old__.status,
                new_payment_status := __new__.status,
                old_ignore := __old__.ignore_in_totals,
                new_ignore := __new__.ignore_in_totals,
                new_type := __new__.type_tag,
                old_account_id := __old__.account.id,
                new_account_id := __new__.account.id,

                # 1. Revert the impact on the OLD account
                old_payment_original_impact := (old_value * (if new_type = "income" then 1 else -1)),
                update_old_account := (
                    update BankAccount filter .id = old_account_id set {
                        balance := .balance - old_payment_original_impact
                    }
                ) if old_payment_status and not old_ignore else <BankAccount>{},

                # 2. Apply the impact on the NEW account
                new_payment_current_impact := (new_value * (if new_type = "income" then 1 else -1)),
                update_new_account := (
                    update BankAccount filter .id = new_account_id set {
                        balance := .balance + new_payment_current_impact
                    }
                ) if new_payment_status and not new_ignore else <BankAccount>{},
            select (update_old_account, update_new_account)
        );


        # Updates balance on movement.account.balance when delete Payment.
        trigger update_balance_on_delete after delete for each when (
            __old__.status = true and __old__.ignore_in_totals = false
        ) do (
            update BankAccount filter .id = __old__.account.id set {
                balance := .balance - __old__.value
            }
        );


        # Updates Payment.event.
        trigger update_event after update for each when (
            __new__.status = true or __old__.is_due != __new__.is_due
        ) do (
            with new_status := __new__.status,
            old_status := __old__.status,
            new_isDue := __new__.is_due,
            payment_date := __new__.payment_date,
            new_date := (
                select payment_date if new_status and new_status != old_status else new_isDue
            )
            update __old__.event set {
                name:= __new__.name,
                status:= __new__.status,
                date:= new_date,
            }
        );
    }
}
